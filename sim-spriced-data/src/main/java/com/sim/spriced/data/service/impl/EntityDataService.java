package com.sim.spriced.data.service.impl;

import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.function.Function;

import javax.transaction.Transactional;

import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.sim.spriced.data.model.EntityData;
import com.sim.spriced.data.model.EntityDataResult;
import com.sim.spriced.data.repo.IEntityDataRepo;
import com.sim.spriced.data.service.IEntityDataRuleService;
import com.sim.spriced.data.service.IEntityDataService;
import com.sim.spriced.framework.models.AttributeConstants;
import com.sim.spriced.framework.models.AttributeConstants.DataType;
import com.sim.spriced.framework.rule.FactResult;
import com.sim.spriced.framework.rule.IRule;


@Service
public class EntityDataService implements IEntityDataService {

	@Autowired
	IEntityDataRepo dataRepo;
	
	@Autowired
	IEntityDataRuleService dataRuleService;

	@Transactional
	@Override
	public EntityDataResult upsertBulk(EntityData data) {
		this.setDateTimeValue(data);
		return EntityDataResult.builder().rowsChanged(this.dataRepo.upsertBulk(data)).build();
	}

	@Override
	public EntityDataResult deleteBulk(EntityData data) {
		return EntityDataResult.builder().rowsChanged(this.dataRepo.deleteBulk(data)).build();
	}

	@Override
	public JSONArray fetchAll(EntityData data) {
		return this.dataRepo.fetchAll(data);
	}

	@Override
	public JSONArray fetchAll(EntityData data, Pageable pageable) {
		return this.dataRepo.fetchAll(data, pageable);
	}

	@Override
	public JSONObject fetchOne(EntityData data) {
		return this.dataRepo.fetchOne(data);
	}

	@Override
	public EntityDataResult upsert(EntityData data) {
		this.setDateTimeValue(data);
		List<Map<String,Object>> jsonObj = Arrays.asList(this.dataRepo.upsert(data)) ;
		return EntityDataResult.builder().rowsChanged(new int[] { 1 }).result(jsonObj).build();
	}

	@Override
	public EntityDataResult upsert(EntityData data, List<IRule<JSONObject>> rules) {
		this.setDateTimeValue(data);
		return this.executeUpsert(data, rules, this::upsert);
	}

	@Transactional
	@Override
	public EntityDataResult upsertBulk(EntityData data, List<IRule<JSONObject>> rules) {
		this.setDateTimeValue(data);
		return this.executeUpsert(data, rules, this::upsertBulk);
	}
	
	
	private EntityDataResult executeUpsert(EntityData data, List<IRule<JSONObject>> rules,Function<EntityData, EntityDataResult> upsertLogic) {
		
		if(rules!=null && !rules.isEmpty()) {
			List<FactResult<JSONObject>> ruleResults = this.dataRuleService.executeRules(rules, data.getValues());
			List<JSONObject> succesfullFacts = ruleResults.stream().filter(FactResult::isSucces).map(FactResult::getOutput).toList();
			data.setValues(succesfullFacts);
			EntityDataResult result = upsertLogic.apply(data);
			result.setRuleValidations(ruleResults);
			return result;
		}
		else {
			return upsertLogic.apply(data);
		}
		
	}
	
	private EntityData setDateTimeValue(EntityData data) {
		data.getAttributes().forEach(item->{
			if(!item.isAutoGenerated() && item.isEditable()) {
				String name = item.getName();
				if(item.getDataType().equals(DataType.TIME_STAMP)){
					for(JSONObject obj:data.getValues()) {
						if(obj.has(name)) {
							obj.put(name, Timestamp.valueOf(obj.get(name).toString()));
						}
					}
				}
				else if(item.getDataType().equals(DataType.DATE)) {
					for(JSONObject obj:data.getValues()) {
						if(obj.has(name)) {
							obj.put(name, Date.valueOf(obj.get(name).toString()));//yyyy-MM-dd
						}
					}
				}
			}
		});
		return data;
	}

}
