package com.sim.spriced.defnition.repo.impl;

import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

import org.jooq.Field;
import org.jooq.OrderField;
import org.jooq.SortField;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.junit.platform.commons.util.CollectionUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Repository;

import com.sim.spriced.defnition.repo.IGroupRepo;
import com.sim.spriced.framework.models.Group;
import com.sim.spriced.framework.repo.BaseRepo;

@Repository
public class GroupRepo extends BaseRepo implements IGroupRepo {
	
	private static final String TABLE="Group";
	private static final String IS_DISABLED="is_disabled";

	@Override
	public Group create(Group group) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Group> fetchAll(boolean loadDisabled) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Page<Group> fetchAll(boolean loadDisabled, Pageable pagable) {
		
		

		 List<Group> queryResults = this.context.selectFrom(table(TABLE))
				 .where(column(IS_DISABLED).eq(loadDisabled))
				 .orderBy(this.getOrderBy(pagable.getSort()))
				 .limit(pagable.getPageSize())
				 .offset(pagable.getOffset())
				 .fetchInto(Group.class);
		 
		 
		 
		return new PageImpl<>(queryResults);
	}

	@Override
	public Group fetchByName(String name) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Group fetchByEntityName(String entityName) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Group updateByName(Group group) {
		// TODO Auto-generated method stub
		return null;
	}
	
	private Collection<? extends OrderField<?>> getOrderBy(Sort sort) {
		 
		 Collection<SortField<?>> querySortFields = sort.stream().map((order)->{
			String sortFieldName = order.getProperty();
			Direction direction = order.getDirection();
			SortField<?> sortField =direction==Direction.ASC? column(sortFieldName).asc():column(sortFieldName).desc();
			return sortField;
		}).collect(Collectors.toList());
		
		return querySortFields;
	}
	
	 

}
